My modified verison of merge sort takes many of functions and ideas from the original merge sort in order to try and make a more effecient sorting algorithm. Modified Mergesort takes an input array that is a double array, and the fist thing that it does is find the already sorted areas of the input array. It finds the sorted regions by looping through the array and creating and copying the sorted subarrays into an array of arrays. After the sorted regions are found, the mergesort function uses recursion to continously merge the first and second subarrays into a main array until all of the regions have been merged into one array. Each time that subarrays 0 and 1 are merged, mergesort is recursively called so that the new sorted subarrays can be found again. Basically it works like this: let's say you have an array: 7,9,5,6,1,2. The first process that takes place is that the sorted regions are found and added to a larger array which would look like this: {{7,9},{5,6},{1,2}}. After that, subarrays 0 and 1 are merged, which leaves {5,6,7,9,1,2}. Next, the subarrays are found again which would result in: {{5,6,7,9},{1,2}}. Next, subarrays 0 and 1 are merged again which results in {1,2,5,6,7,9}. When the array is sorted, the algorithm is done and returns one sorted array. 



After running my modified version of mergesort, I concluded that it was extremely slow compared to original mergesort. The graphs and data to support this conclusion can be found in "assignment1 data and graphs" excel file. 